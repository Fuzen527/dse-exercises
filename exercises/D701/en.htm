<p>Queue is a data structure that allows data to be accessed "First-in-first-out" efficiently. Specifically, it supports the following operations.</p>
<ul>
	<li>\texttt{PUSH} $x$: Insert $x$ to the end of the queue.</li>
	<li>\texttt{FRONT}: Returns the element at the front of the queue if there is any.</li>
	<li>\texttt{POP}: Remove an element from the front of the queue if there is any. </li>
	<li>\texttt{SIZE}: Returns the number of the elements in the queue currently.</li>
</ul>
<p>In this exercise, we will implement a queue that handles integers.</p>

<h1>Input</h1>

<p>The first line contains integer $N$, the number of operations. ($1 \le N \le 1000$)</p>
<p>Each of the next $N$ lines describe an operation: \texttt{PUSH}, \texttt{FRONT}, \texttt{POP} or \texttt{SIZE}.<br>If the operation is \texttt{PUSH}, it will be followed by an integer $x$ ($1 \le x \le 10^9$).</p>

<h1>Output</h1>
<p>When the operation is \texttt{FRONT}, output the integer at the front of the queue if there is any, otherwise output \texttt{Empty} if the queue is currently empty.
</p>
<p>When the operation is \texttt{POP} and the queue is current empty, output \texttt{Cannot pop}.<br>
<p>When the operation is \texttt{SIZE}, output an integer -- the number of elements in the queue currently.</p>
