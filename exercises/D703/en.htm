<p>Linked list is a data structure that allows efficient sequential access and manipulation of data. Specifically, it supports the following operations.</p>
<ul>
	<li>\texttt{HEAD}: Reset the pointer to the first element in the linked list.
	<li>\texttt{NEXT}: Move the pointer to the next element.
	<li>\texttt{QUERY}: Query the value of the element pointed by the pointer.
	<li>\texttt{UPDATE} $x$: Change the currently pointed element to $x$.
</ul>
<p>In this exercise, we will learn how a linked list is represented using an array. The rest of the features, such as insertion and deletion, will be discussed in the next exercise.</p>

<h1>Input</h1>

<p>The first line contains two integers $N$ and $H$. $N$ is the number of elements in the linked list. ($1 \le N \le 100). $H$ is the index of the first element in the linked list. ($1 \le H \le N$)</p>
<p>The next line contains $N$ integers, of which the $i^\text{th}$ is the value stored at index $i$. The integers are between $1$ and $10^9$.
<p>The next line contains $N$ integers, of which the $i^\text{th}$ is the index of the element after the element at index $i$. For the last element in the linked list, the number is 0.
<p>The next line contains an integer $M$, the number of operations. ($1 \le M \le 1000$)
<p>Each of the next $M$ lines describe an operation: \texttt{FIRST}, \texttt{NEXT}, \texttt{QUERY} or \texttt{UPDATE}.<br>If the operation is \texttt{UPDATE}, it will be followed by an integer $x$ ($1 \le x \le 10^9$).</p>
<p>The pointer is initially pointing at the first element (index $H$).

<h1>Output</h1>
<p>When the operation is \texttt{QUERY}, output the value of the element pointed by the pointer. If the pointer is pointing at the null element (index = 0, which indicates end of linked list), output \texttt{End} instead.</p>
